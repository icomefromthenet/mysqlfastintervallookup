SELECT `range_high`,`range_low` FROM `prices_adv` ORDER BY RAND() LIMIT 1 INTO @maxPrice,@minPrice;
--  ----------------------------------------------------------------------------
--  Test of the Includes Allens relation
-- -----------------------------------------------------------------------------


SELECT `b`.`price_id`,round(`b`.`range_low`/100,2),round(`b`.`range_high`/100,2)
FROM ( SELECT `price_id`
    FROM `prices_basic` 
    WHERE `range_low` < @minPrice
    AND `range_high` > @maxPrice
) a, prices_basic b
WHERE `a`.`price_id` = `b`.`price_id`
ORDER BY `b`.`price_id` ASC
LIMIT 10;


--  ----------------------------------------------------------------------------
--  Test of the Includes Allens relation using tree method
-- -----------------------------------------------------------------------------

CALL bm_rules_timeslot_nodes_top_left(@minPrice,@maxPrice);
CALL bm_rules_timeslot_nodes_top_right(@minPrice,@maxPrice);
SET @forkNode  = utl_fork_node(@minPrice,@maxPrice);

SELECT `b`.`price_id`, round(`b`.`range_low`/100,2), round(`b`.`range_high`/100,2)
FROM (
    
    SELECT `i`.`price_id`
    FROM `prices_adv` i USE INDEX (`idx_prices_adv_lowerUpperIndex`)
    JOIN (
        -- topRight
        SELECT `node` FROM `timeslot_nodes_top_right`
        UNION ALL
        -- fork
        SELECT @forkNode `node`
    ) n on `i`.`node` = `n`.`node`
    WHERE `i`.`range_low`  < @minPrice
    AND `i`.`range_high` > @maxPrice
    
    UNION ALL
    
    SELECT `i`.`price_id`
    FROM `prices_adv` i USE INDEX (`idx_prices_adv_upperLowerIndex`)
    JOIN `timeslot_nodes_top_left` n ON `i`.`node`= `n`.`node`
    AND `i`.`range_high` > @maxPrice
    
) a, prices_adv b
WHERE `a`.`price_id` = `b`.`price_id`
ORDER BY `b`.`price_id` ASC
LIMIT 10;


