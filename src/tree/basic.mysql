SELECT open_slot_id, (close_slot_id  +1)
INTO @minslot, @maxslot
FROM calendar 
WHERE y = (select max(y)-1 from calendar) 
AND w   = 4 
AND dw  = 1;

/*
* Be aware of interval formats.
* 
* The slots table does not store the intervals as closed-open format its using closed-closed
* format.
*
* Above when I selected a day I made sure to convert the interval format by adding
* 1 slot value to the closing slot. this means that given 2 intervals p and q  that p2 =q1.
* 
*/


SET profiling=1;

CALL bm_rules_timeslot_left_nodes(@minslot,@maxslot);
CALL bm_rules_timeslot_right_nodes(@minslot,@maxslot);

-- select * from timeslot_left_nodes_result;
-- select * from timeslot_right_nodes_result;

-- 4237921
-- 4239361


    select count(*) from (
    SELECT i.*
    FROM timeslot_slots_tree i USE INDEX (`idx_timeslot_slots_tree_ri_upper`)
    JOIN timeslot_left_nodes_result l ON i.node = l.node
    AND i.timeslot_id = 1
    -- As where using closed-open interval format we only use '>' as given two intervals p and q that p2 = q1
    -- if we used '>=' operator we would match nodes that qualify as 'meet' allens relation which we don't want.
    AND i.closing_slot_id > @minslot
    UNION ALL
    SELECT i.*
    FROM timeslot_slots_tree i
    JOIN timeslot_right_nodes_result l ON i.node = l.node
    AND i.timeslot_id = 1
    AND i.opening_slot_id <= @maxslot
    UNION ALL 
    SELECT i.*
    FROM timeslot_slots_tree i
    WHERE node BETWEEN @minslot AND @maxslot
    AND i.timeslot_id = 1) i
    order by i.opening_slot_id;
    

SHOW profiles;