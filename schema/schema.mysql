SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Table `proclog` (is created in procedure)
-- -----------------------------------------------------

DROP TABLE IF EXISTS `proclog`;

-- -----------------------------------------------------
-- Table `ints`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ints` ;

CREATE TABLE IF NOT EXISTS `ints` (
  `i` TINYINT NOT NULL,
  PRIMARY KEY (`i`))
ENGINE = InnoDB
COMMENT = 'seed table for creating calender';



-- -----------------------------------------------------
-- Table `slots`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `slots` ;

CREATE TABLE IF NOT EXISTS `slots` (
  -- uses a closed:closed interval format due to  slots only have 1 minute length
  `slot_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Table primary key',
  `cal_date` DATE NOT NULL COMMENT 'Date this slot occurs on used to join date time',
  `slot_open` DATETIME NOT NULL COMMENT 'Opending Interval of this slot',
  `slot_close` DATETIME NOT NULL COMMENT 'closing internal of slot',
  PRIMARY KEY (`slot_id`),
  INDEX `fk_slots_1_idx` (`cal_date` ASC)
)ENGINE = InnoDB
 COMMENT = 'The common slots table, each slot is the minium slot duratio /* comment truncated */ /*n of 1 minute. */';

-- -----------------------------------------------------
-- Table `calendar`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `calendar` ;

CREATE TABLE IF NOT EXISTS `calendar` (
  `calendar_date` DATE NOT NULL COMMENT 'date and table key',
  `y` SMALLINT NULL COMMENT 'year where date occurs',
  `q` TINYTEXT NULL COMMENT 'quarter of the year date belongs',
  `m` TINYINT NULL COMMENT 'month of the year',
  `d` TINYINT NULL COMMENT 'numeric date part',
  `dw` TINYINT NULL COMMENT 'day number of the date in a week',
  `month_name` VARCHAR(9) NULL COMMENT 'text name of the month',
  `day_name` VARCHAR(9) NULL COMMENT 'text name of the day\n',
  `w` TINYINT NULL COMMENT 'week number in the year',
  `is_week_day` TINYINT NULL COMMENT 'true value if current date falls between monday-friday\n',
  `open_slot_id` INT NULL COMMENT 'The slot bounderies for the  start of the day',
  `close_slot_id` INT NULL COMMENT 'The slot bounderies for the end of the day',
  
  PRIMARY KEY (`calendar_date`),
  
  CONSTRAINT `fk_cal_slots_1`
    FOREIGN KEY (`open_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cal_slots_2`
    FOREIGN KEY (`close_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION 
    
)ENGINE = InnoDB
COMMENT = 'Calender table that store the next 10 years of dates';

-- -----------------------------------------------------
-- Table `calendar_weeks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `calendar_weeks`;

CREATE TABLE IF NOT EXISTS `calendar_weeks` (
 `y` SMALLINT NULL COMMENT 'year where date occurs',
 `m` TINYINT NULL COMMENT 'month of the year',
 `w` TINYINT NULL COMMENT 'week in the year',
 `open_slot_id` INT NULL COMMENT 'The slot bounderies for the  start of the week',
 `close_slot_id` INT NULL COMMENT 'The slot bounderies for the end of the week',
 
 PRIMARY KEY(`y`,`w`),
 CONSTRAINT `fk_cal_weeks_slots_1`
    FOREIGN KEY (`open_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_cal_weeks_slots_2`
    FOREIGN KEY (`close_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
 
)ENGINE = InnoDB
COMMENT = 'Calender table that store the next x years in week aggerates';

-- -----------------------------------------------------
-- Table `calendar_months`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `calendar_months`;

CREATE TABLE IF NOT EXISTS `calendar_months` (
 `y` SMALLINT NULL COMMENT 'year where date occurs',
 `m` TINYINT NULL COMMENT 'month of the year',
 `month_name` VARCHAR(9) NULL COMMENT 'text name of the month',
 `m_sweek` TINYINT NULL COMMENT 'week number in the year',
 `m_eweek` TINYINT NULL COMMENT 'week number in the year',
 `open_slot_id` INT NULL COMMENT 'The slot bounderies for the  start of the month',
 `close_slot_id` INT NULL COMMENT 'The slot bounderies for the end of the month',
 
 PRIMARY KEY(`y`,`m`),
 CONSTRAINT `fk_cal_months_slots_1`
    FOREIGN KEY (`open_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_cal_months_slots_2`
    FOREIGN KEY (`close_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
 
)ENGINE = InnoDB
COMMENT = 'Calender table that store the next x years in month aggerates';

-- -----------------------------------------------------
-- Table `calendar_quarters`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `calendar_quarters`;

CREATE TABLE IF NOT EXISTS `calendar_quarters` (
 `y` SMALLINT NULL COMMENT 'year where date occurs',
 `q` TINYINT NULL COMMENT 'quarter of the year date belongs',
 `m_start` DATE NULL COMMENT 'starting month',
 `m_end` DATE NULL COMMENT 'ending_months',
 `open_slot_id` INT NULL COMMENT 'The slot bounderies for the  start of the quarter',
 `close_slot_id` INT NULL COMMENT 'The slot bounderies for the end of the quarter',
 
 PRIMARY KEY(`y`,`q`),
 CONSTRAINT `fk_cal_quarters_slots_1`
    FOREIGN KEY (`open_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_cal_quarters_slots_2`
    FOREIGN KEY (`close_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
 
)ENGINE = InnoDB
COMMENT = 'Calender table that store the next x years in month quarter aggerates';

-- -----------------------------------------------------
-- Table `calendar_years`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `calendar_years`;

CREATE TABLE IF NOT EXISTS `calendar_years` (
 `y` SMALLINT NULL COMMENT 'year where date occurs',
 `y_start` DATETIME NOT NULL,
 `y_end` DATETIME NOT NULL,
 `open_slot_id` INT NULL COMMENT 'The slot bounderies for the  start of the year',
 `close_slot_id` INT NULL COMMENT 'The slot bounderies for the end of the year',
 
 PRIMARY KEY(`y`),
 CONSTRAINT `fk_cal_years_slots_1`
    FOREIGN KEY (`open_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
 CONSTRAINT `fk_cal_years_slots_2`
    FOREIGN KEY (`close_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
)ENGINE = InnoDB
COMMENT = 'Calender table that store the next x years';


-- -----------------------------------------------------
-- Table `timeslots`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `timeslots` ;

CREATE TABLE IF NOT EXISTS `timeslots` (
  `timeslot_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Table Primary key\n',
  `timeslot_length` INT NOT NULL COMMENT 'Number of minutes in the slot',
  PRIMARY KEY (`timeslot_id`),
  UNIQUE INDEX `timeslot_length_UNIQUE` (`timeslot_length` ASC))
ENGINE = InnoDB
COMMENT = 'This describes the intervals lengths ie timeslots that used  /* comment truncated */ /*by schedules*/';


-- -----------------------------------------------------
-- Table `timeslot_slots_tree`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `timeslot_slots_tree` ;

CREATE TABLE IF NOT EXISTS `timeslot_slots_tree` (
  -- uses a closed:open interval format
  -- RI Tree

  `timeslot_slot_id` INT NOT NULL AUTO_INCREMENT,
  `opening_slot_id` INT NOT NULL,
  `closing_slot_id` INT NOT NULL,
  `timeslot_id` INT NOT NULL,
  
  -- Value of the fork node, used to part of the RI Tree
  `node` INT NOT NULL,
  
  -- Constraints and indexes
  PRIMARY KEY (`timeslot_slot_id`),
  
  -- RI Indexes
  INDEX `idx_timeslot_slots_tree_ri_lower` (`timeslot_id`,`node`,`opening_slot_id`),
  INDEX `idx_timeslot_slots_tree_ri_upper` (`timeslot_id`,`node`,`closing_slot_id`),
  
  -- Normal Constraints
  CONSTRAINT UNIQUE `timeslot_slots_tree_uc1` (`timeslot_id` ASC,`opening_slot_id` ASC, `closing_slot_id` ASC),
  CONSTRAINT `fk_timeslot_slots_tree_1`
    FOREIGN KEY (`timeslot_id`)
    REFERENCES `timeslots` (`timeslot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_timeslot_slots_tree_2`
    FOREIGN KEY (`opening_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_timeslot_slots_tree_3`
    FOREIGN KEY (`closing_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB
COMMENT = 'Groups our timeslots into slot groups.';




-- -----------------------------------------------------
-- Table `timeslot_slots`
-- -----------------------------------------------------

DROP TABLE IF EXISTS `timeslot_slots` ;

CREATE TABLE IF NOT EXISTS `timeslot_slots` (
  `timeslot_slot_id` INT NOT NULL AUTO_INCREMENT,
  `opening_slot_id` INT NOT NULL,
  `closing_slot_id` INT NOT NULL,
  `timeslot_id` INT NOT NULL,
  
  -- Constraints and indexes
  PRIMARY KEY (`timeslot_slot_id`),
  
  -- Normal Constraints
  UNIQUE INDEX `timeslot_slots_uk1` (`timeslot_id` ASC,`opening_slot_id` ASC, `closing_slot_id` ASC),
  CONSTRAINT `fk_timeslot_slots_1`
    FOREIGN KEY (`timeslot_id`)
    REFERENCES `timeslots` (`timeslot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_timeslot_slots_2`
    FOREIGN KEY (`opening_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_timeslot_slots_3`
    FOREIGN KEY (`closing_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB
COMMENT = 'Groups our timeslots into slot groups.';


-- -----------------------------------------------------
-- Table `bookings` 
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bookings` ;

CREATE TABLE IF NOT EXISTS `bookings` (
  
  `booking_id` INT NOT NULL AUTO_INCREMENT,
  `opening_slot_id` INT NOT NULL,
  `closing_slot_id` INT NOT NULL,
  
  
  -- Constraints and indexes
  PRIMARY KEY (`booking_id`),
  
  
  -- Extra Columns that booking might have
  `address_line_1` VARCHAR(255) NOT NULL,
  `address_line_2` VARCHAR(255),
  `cust_title` VARCHAR(5),
  `cust_fname` VARCHAR(100) NOT NULL,
  `cust_lname` VARCHAR(100) NOT NULL,
  
  -- Normal Constraints
  CONSTRAINT `fk_bookings_adv_2`
    FOREIGN KEY (`opening_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_bookings_adv_3`
    FOREIGN KEY (`closing_slot_id`)
    REFERENCES `slots` (`slot_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION 
) ENGINE = InnoDB
COMMENT = 'Bookings table with interval values part of a fk relation';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- Table `prices_adv` books with ritree
-- -----------------------------------------------------
DROP TABLE IF EXISTS `prices_adv` ;

CREATE TABLE IF NOT EXISTS `prices_adv` (
  -- uses a closed:open interval format
  -- 
  -- RI Tree

  `price_id` INT NOT NULL AUTO_INCREMENT,
  `range_low` INT NOT NULL,
  `range_high` INT NOT NULL,
  
  -- Value of the fork node, used to part of the RI Tree
  `node` INT NOT NULL,
  
  -- Constraints and indexes
  PRIMARY KEY (`price_id`),
  
  -- RI Indexes advanced.
  INDEX `idx_prices_adv_lowerUpperIndex` (`node`,`range_low`,`range_high`,`price_id`),
  INDEX `idx_prices_adv_upperLowerIndex` (`node`,`range_high`,`range_low`,`price_id`),
  
  
  -- Extra Columns that booking might have
  `product_description` VARCHAR(255) NOT NULL,
  `product_name` VARCHAR(255),
  `extra_a` VARCHAR(100),
  `extra_b` VARCHAR(100) NOT NULL,
  `extra_c` VARCHAR(100) NOT NULL
  
  
) ENGINE = InnoDB
COMMENT = 'RI Tree for prices range table';


-- -----------------------------------------------------
-- Table `prices_adv` books with ritree
-- -----------------------------------------------------
DROP TABLE IF EXISTS `prices_basic` ;

CREATE TABLE IF NOT EXISTS `prices_basic` (
  -- uses a closed:open interval format
  
  `price_id` INT NOT NULL AUTO_INCREMENT,
  `range_low` INT NOT NULL,
  `range_high` INT NOT NULL,
  
  
  -- Constraints and indexes
  PRIMARY KEY (`price_id`),
  
  -- Extra Columns that booking might have
  `product_description` VARCHAR(255) NOT NULL,
  `product_name` VARCHAR(255),
  `extra_a` VARCHAR(100),
  `extra_b` VARCHAR(100) NOT NULL,
  `extra_c` VARCHAR(100) NOT NULL
  
  
) ENGINE = InnoDB
COMMENT = 'Common example of price range range table';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;