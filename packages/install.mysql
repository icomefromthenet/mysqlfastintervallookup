-- -----------------------------------------------------
-- Procedures for Install Package
-- -----------------------------------------------------

DELIMITER $$

-- -----------------------------------------------------
-- procedure bm_install_run
-- -----------------------------------------------------

DROP procedure IF EXISTS `bm_install_run`$$

CREATE PROCEDURE `bm_install_run` (IN years INT)
BEGIN
	DECLARE timeslotID INT;
	DECLARE timeslotLength INT;
	DECLARE l_last_row_fetched INT DEFAULT 0;
	-- timeslot loop vars
	DECLARE timeslots_cursor CURSOR FOR SELECT `timeslot_id`,`timeslot_length` FROM timeslots;
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET l_last_row_fetched=1;
	
	-- Create the debug table
	IF @bm_debug = true THEN
		CALL util_proc_setup();
	END IF;
	
	-- set default number of calender years to generate
	IF (years = NULL) THEN
		SET years = 10;
	END IF;

	-- setup calender for 10 years
	CALL bm_calendar_setup_cal(years);

	-- setup slots for 10 years
	CALL bm_calender_setup_slots();

	
	-- buid timeslots found in table into group cache table
	SET l_last_row_fetched=0;
	OPEN timeslots_cursor;
		cursor_loop:LOOP

		FETCH timeslots_cursor INTO timeslotID,timeslotLength;
		IF l_last_row_fetched=1 THEN
			LEAVE cursor_loop;
		END IF;

		IF @bm_debug = true THEN
			CALL util_proc_log(concat('build timeslots for ',ifnull(timeslotID,'null'),' for length ',ifnull(timeslotLength,'null')));
		END IF;
		
		IF MOD((60*24),timeslotLength) > 0 THEN 
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Slot length must be divide day evenly';
		END IF;
		
		CALL bm_calendar_build_timeslot_slots(timeslotID,timeslotLength);

		END LOOP cursor_loop;
	CLOSE timeslots_cursor;
	SET l_last_row_fetched=0;


    -- execute debug log cleanup
    IF @bm_debug = true THEN
    	CALL util_proc_cleanup('Finished Procedure bm_install_run()');
    END IF;
    
END;
$$



-- -----------------------------------------------------
-- procedure bm_install_seed_bookings
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS `bm_install_seed_bookings`$$

CREATE PROCEDURE `bm_install_seed_bookings` (IN numBookings INT, IN bookingTimeslotCount INT, IN bookingTimeslot INT)
BEGIN
	
	DECLARE l_loop_count INT DEFAULT numBookings;
	DECLARE l_random_calday_open INT DEFAULT 0;
	DECLARE l_random_calday_close INT DEFAULT 0;
	DECLARE l_timeslot_min_length INT;
	DECLARE l_timeslot_random_open INT;
	DECLARE l_timeslot_random_close INT;
	SET numBookings = numBookings +1;
	
	-- fetch timeslot details
	SELECT timeslot_length INTO l_timeslot_min_length FROM timeslots
	WHERE timeslot_id = bookingTimeslot;

	IF l_timeslot_min_length IS NULL  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Unable to fetch timeslot length';
	END IF;
	
	-- Create the debug table
	IF @bm_debug = true THEN
		CALL util_proc_setup();
	END IF;
	
	-- This table uses RI Tree so needs to call utl_fork_node to calculate the node column. 
    -- This in effect creats a virtual tree structure.
    
	bookingLoop:WHILE l_loop_count > 0 DO
	
		-- find random calender day.
		SELECT open_slot_id, close_slot_id INTO l_random_calday_open,l_random_calday_close from calendar s
		GROUP BY s.y, s.m, s.d
		ORDER BY RAND()
		LIMIT 1;
		
		-- find a random timeslot from that day as opening slot
		-- this example of the occupies combined relation (Starts,Finishes,During and NOT Equal)
		SELECT a.opening_slot_id INTO l_timeslot_random_open
	    FROM timeslot_slots a
	    WHERE (a.opening_slot_id >= l_random_calday_open AND a.closing_slot_id <= l_random_calday_close)
	    AND NOT(a.opening_slot_id = l_random_calday_open AND a.closing_slot_id = l_random_calday_close)
	    ORDER BY a.opening_slot_id ASC
	    LIMIT 1;
		
		-- not adding 1 to closing slot as timeslot_slots start at 1 not 0
		SET l_timeslot_random_close = l_timeslot_random_open + (l_timeslot_min_length * (CEIL(RAND() * bookingTimeslotCount)));
		
	  	INSERT INTO bookings (booking_id,opening_slot_id,closing_slot_id,node,address_line_1,address_line_2,cust_title,cust_fname,cust_lname) 
	  	VALUES (NULL
	  	       ,l_timeslot_random_open
	  	       ,l_timeslot_random_close
	  	       ,'78 Test Street Example Suburb'
	  	       ,'Example City ,11111'
	  	       ,'Mr'
	  	       ,'TestFname'
	  	       ,'TestLname'
	  	);
	  	
	  	INSERT INTO bookings_adv (booking_id,opening_slot_id,closing_slot_id,node,address_line_1,address_line_2,cust_title,cust_fname,cust_lname,node) 
	  	VALUES (NULL
	  	       ,l_timeslot_random_open
	  	       ,l_timeslot_random_close
	  	       ,'78 Test Street Example Suburb'
	  	       ,'Example City ,11111'
	  	       ,'Mr'
	  	       ,'TestFname'
	  	       ,'TestLname'
	  	       ,utl_fork_node(l_timeslot_random_open,l_timeslot_random_close)
	  	);
	
		SET l_loop_count = l_loop_count -1;
		
	END WHILE bookingLoop;
	
	-- execute debug log cleanup
    IF @bm_debug = true THEN
    	CALL util_proc_cleanup('Finished Procedure bm_install_seed_bookings()');
    END IF;

END;
$$


-- -----------------------------------------------------
-- procedure bm_install_seed_costs
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS `bm_install_seed_price`$$

CREATE PROCEDURE `bm_install_seed_price` (IN numCosts INT, IN maxHigh INT, IN minLow INT,IN mean FLOAT,IN stdv FLOAT)
BEGIN

	DECLARE l_loop_count INT DEFAULT 0;
	DECLARE l_random_low INT DEFAULT 0;
	DECLARE l_random_high INT DEFAULT 0;
	DECLARE l_max_high INT;
	
	SET numCosts = numCosts +1;
	SET l_loop_count = numCosts;
	
	-- Create the debug table
	IF @bm_debug = true THEN
		CALL util_proc_setup();
	END IF;
	
	-- seed random value table
	
	/*
	INSERT INTO `random_v` (`id`,`rando`)
	SELECT f.i*100000 + e.i*10000 + d.i *1000 + c.i *100 + b.i*10 + a.i
		  ,gauss(10000,5) 
	FROM `ints`
	JOIN `ints` a JOIN `ints` b JOIN `ints` c JOIN `ints` d JOIN `ints` e JOIN f
	WHERE f.i*100000 + e.i*10000 + d.i*1000 + c.i *100 + b.i*10 + a.i ;
	*/
	
	costLoop:WHILE l_loop_count > 0 DO
	
		SET l_random_low  =  minLow + FLOOR(RAND() * (maxHigh-minLow));
		SET l_random_high = l_random_low + FLOOR(gauss(mean,stdv));
		
		INSERT INTO `prices_adv` (`price_id`, `range_low`,`range_high`,`node`,`product_description`,`product_name`, `extra_a`,`extra_b`,`extra_c`)
		VALUES (NULL,l_random_low,l_random_high,utl_fork_node(l_random_low,l_random_high),'A test product description','A test product name','a','b','c');
		
		INSERT INTO `prices_basic` (`price_id`, `range_low`,`range_high`,`product_description`,`product_name`, `extra_a`,`extra_b`,`extra_c`)
		VALUES (NULL,l_random_low,l_random_high,'A test product description','A test product name','a','b','c');
		
		SET l_loop_count = l_loop_count -1;
		
	END WHILE costLoop;
	
	-- execute debug log cleanup
    IF @bm_debug = true THEN
    	CALL util_proc_cleanup('Finished Procedure bm_install_seed_costs()');
    END IF;

END;
$$


